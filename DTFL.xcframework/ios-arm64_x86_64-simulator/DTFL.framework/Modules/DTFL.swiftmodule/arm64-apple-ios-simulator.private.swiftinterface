// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DTFL
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import DTFL
import Foundation
import QuartzCore
import Swift
import SystemConfiguration
import UIKit
import Vision
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @objc public class DTException : ObjectiveC.NSObject, Swift.Error {
  @objc public func getErrorCode() -> Foundation.NSNumber?
  @objc public func getErrorMessage() -> Foundation.NSString?
  @objc deinit
}
public enum ErrorCode : Swift.Int {
  case INVALID_INPUT, INIT_NOT_CALLED, USER_CANCELLED, INTERNAL_ERROR, PERMISSION_NOT_GRANTED, SERVER_ERROR, CAPTURE_FAILED, CAMERA_LAUNCH_FAILED, GET_CAMERA_INFO_FAILED, FACE_NOT_DETECTED_USER_CANCELLED, EYES_CLOSED, CAMERA_NOT_FOUND, MULTIPLE_FACE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ErrorMessage : Swift.String {
  case INVALID_INPUT
  case INIT_NOT_CALLED
  case USER_CANCELLED
  case INTERNAL_ERROR
  case PERMISSION_NOT_GRANTED
  case SERVER_ERROR
  case CAPTURE_FAILED
  case CAMERA_LAUNCH_FAILED
  case GET_CAMERA_INFO_FAILED
  case FACE_NOT_DETECTED_USER_CANCELLED
  case EYES_CLOSED
  case CAMERA_NOT_FOUND
  case MULTIPLE_FACE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class LivenessConfig {
  public func setFaceMaxAngle(angle: Swift.Float)
  public func setFaceMinAngle(angle: Swift.Float)
  public func setCameraMaxAngle(angle: Swift.Float)
  public func setCameraMinAngle(angle: Swift.Float)
  public func setBoundingBoxMaxPercent(percent: Swift.Float)
  public func setBoundingBoxMinPercent(percent: Swift.Float)
  public func setPerformanceMode(mode: Swift.Int)
  public func setTriggerType(type: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DTFaceConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setFaceCaptureTitle(_ title: Swift.String)
  @objc public func setClientRefId(_ clientRefId: Swift.String)
  @objc public func setFaceNonLiveDescription(_ desc: Swift.String)
  @objc public func setFaceLiveDescription(_ desc: Swift.String)
  @objc public func setMultipleFacesDescription(_ desc: Swift.String)
  @objc public func setMoveCameraAwayDescription(_ desc: Swift.String)
  @objc public func setMoveCameraCloserDescription(_ desc: Swift.String)
  @objc public func setAllowMultipleFace(_ allow: Swift.Bool)
  @objc public func setAllowEyesClosed(_ allow: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DTFLSDK : ObjectiveC.NSObject {
  @objc public static func initialize(clientId: Swift.String, clientSecret: Swift.String, environment: DTFL.DTEnvironment) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class DTFLVC : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, dtFaceConfig: DTFL.DTFaceConfig, completionHandler: @escaping (DTFL.DTException?, [Swift.String : Any]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum DTEnvironment : Swift.Int {
  case PRODUCTION
  case UAT
  case STAGE
  case DEV
}
extension DTFL.DTEnvironment : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: DTFL.DTEnvironment.RawValue)
  public var rawValue: DTFL.DTEnvironment.RawValue {
    get
  }
}
extension DTFL.ErrorCode : Swift.Equatable {}
extension DTFL.ErrorCode : Swift.Hashable {}
extension DTFL.ErrorCode : Swift.RawRepresentable {}
extension DTFL.ErrorMessage : Swift.Equatable {}
extension DTFL.ErrorMessage : Swift.Hashable {}
extension DTFL.ErrorMessage : Swift.RawRepresentable {}
extension DTFL.DTEnvironment : Swift.Equatable {}
extension DTFL.DTEnvironment : Swift.Hashable {}
