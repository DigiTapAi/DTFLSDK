// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name DTFL
import AVFoundation
@_exported import DTFL
import Foundation
import QuartzCore
import Swift
import UIKit
import Vision
@_hasMissingDesignatedInitializers open class DTException : Swift.Error {
  public func getErrorCode() -> Swift.Int?
  public func getErrorMessage() -> Swift.String?
  @objc deinit
}
public enum ErrorCode : Swift.Int {
  case INVALID_INPUT
  case INIT_NOT_CALLED
  case USER_CANCELLED
  case INTERNAL_ERROR
  case PERMISSION_NOT_GRANTED
  case SERVER_ERROR
  case CAPTURE_FAILED
  case CAMERA_LAUNCH_FAILED
  case GET_CAMERA_INFO_FAILED
  case FACE_NOT_DETECTED_USER_CANCELLED
  case EYES_CLOSED
  case CAMERA_NOT_FOUND
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ErrorMessage : Swift.String {
  case INVALID_INPUT
  case INIT_NOT_CALLED
  case USER_CANCELLED
  case INTERNAL_ERROR
  case PERMISSION_NOT_GRANTED
  case SERVER_ERROR
  case CAPTURE_FAILED
  case CAMERA_LAUNCH_FAILED
  case GET_CAMERA_INFO_FAILED
  case FACE_NOT_DETECTED_USER_CANCELLED
  case EYES_CLOSED
  case CAMERA_NOT_FOUND
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class LivenessConfig {
  public func setFaceMaxAngle(angle: Swift.Float)
  public func setFaceMinAngle(angle: Swift.Float)
  public func setCameraMaxAngle(angle: Swift.Float)
  public func setCameraMinAngle(angle: Swift.Float)
  public func setBoundingBoxMaxPercent(percent: Swift.Float)
  public func setBoundingBoxMinPercent(percent: Swift.Float)
  public func setPerformanceMode(mode: Swift.Int)
  public func setTriggerType(type: Swift.String)
  @objc deinit
}
open class DTFaceConfig {
  public init()
  public func setFaceCaptureTitle(title: Swift.String)
  public func setClientRefId(clientRefId: Swift.String)
  public func setFaceNonLiveDescription(desc: Swift.String)
  public func setFaceLiveDescription(desc: Swift.String)
  public func setMultipleFacesDescription(desc: Swift.String)
  public func setMoveCameraAwayDescription(desc: Swift.String)
  public func setMoveCameraCloserDescription(desc: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class DTFLSDK {
  public static func initialize(clientId: Swift.String, clientSecret: Swift.String, environment: DTFL.DTEnvironment) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class DTFLVC : UIKit.UIViewController {
  public static func start(_ callingVC: UIKit.UIViewController, dtFaceConfig: DTFL.DTFaceConfig, completionHandler: @escaping (DTFL.DTException?, [Swift.String : Any]?) -> Swift.Void)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum DTEnvironment : Swift.String {
  case PRODUCTION
  case UAT
  case STAGE
  case DEV
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
